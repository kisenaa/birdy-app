apply plugin: 'com.android.library'

group = 'expo.modules.birdinferencenative'
version = '0.7.2'

def expoModulesCorePlugin = new File(project(":expo-modules-core").projectDir.absolutePath, "ExpoModulesCorePlugin.gradle")
apply from: expoModulesCorePlugin
applyKotlinExpoModulesCorePlugin()
apply from: '../nitrogen/generated/android/birdinference_native+autolinking.gradle'

useCoreDependencies()
useExpoPublishing()

// If you want to use the managed Android SDK versions from expo-modules-core, set this to true.
// The Android SDK versions will be bumped from time to time in SDK releases and may introduce breaking changes in your module code.
// Most of the time, you may like to manage the Android SDK versions yourself.

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

def reactNativeArchitectures() {
  def value = rootProject.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

apply plugin: "com.android.library"
if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["ImageCompressor_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["ImageCompressor_" + name]).toInteger()
}


def useManagedAndroidSdkVersions = false
if (useManagedAndroidSdkVersions) {
  useDefaultAndroidSdkVersions()
} else {
  buildscript {
    // Simple helper that allows the root project to override versions declared by this library.
    ext.safeExtGet = { prop, fallback ->
      rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
    }
  }
  project.android {
    compileSdkVersion safeExtGet("compileSdkVersion", 34)
    defaultConfig {
      minSdkVersion safeExtGet("minSdkVersion", 21)
      targetSdkVersion safeExtGet("targetSdkVersion", 34)
      buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
    }
  }
}

android {
  namespace "expo.modules.birdinferencenative"
  defaultConfig {
    versionCode 1
    versionName "0.7.2"
    externalNativeBuild {
      cmake {
        cppFlags "-O2 -frtti -fexceptions -Wall -fdata-sections -ffunction-sections"
        arguments "-DANDROID_STL=c++_shared"
        abiFilters (*reactNativeArchitectures())
      }
    }
  }
  lintOptions {
    abortOnError false
  }
  externalNativeBuild {
    cmake {
      path file('src/main/cpp/CMakeLists.txt')
      version '3.22.1'
    }
  }
  packagingOptions {
    excludes = [
            "META-INF",
            "META-INF/**",
            "**/libc++_shared.so",
            "**/libfbjni.so",
            "**/libjsi.so",
            "**/libfolly_json.so",
            "**/libfolly_runtime.so",
            "**/libglog.so",
            "**/libhermes.so",
            "**/libhermes-executor-debug.so",
            "**/libhermes_executor.so",
            "**/libreactnative.so",
            "**/libreactnativejni.so",
            "**/libturbomodulejsijni.so",
            "**/libreact_nativemodule_core.so",
            "**/libjscexecutor.so"
    ]
  }
  buildFeatures {
    buildConfig true
    prefab true
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  configurations {
    extractHeaders
    extractSO
  }

  sourceSets {
    main {
      if (isNewArchitectureEnabled()) {
        java.srcDirs += [
          // React Codegen files
          "${project.buildDir}/generated/source/codegen/java"
        ]
      }
    }
  }
}

repositories {
  mavenCentral()
  google()
}

dependencies {
  implementation "com.facebook.react:react-native"

  implementation "com.google.ai.edge.litert:litert:1.3.0"
  extractSO "com.google.ai.edge.litert:litert:1.3.0"
  extractHeaders "com.google.ai.edge.litert:litert:1.3.0"

  implementation "com.google.ai.edge.litert:litert-gpu:1.3.0"
  extractSO "com.google.ai.edge.litert:litert-gpu:1.3.0"
  extractHeaders "com.google.ai.edge.litert:litert-gpu:1.3.0"

  implementation "com.google.ai.edge.litert:litert-gpu-api:1.3.0"
  extractSO "com.google.ai.edge.litert:litert-gpu-api:1.3.0"
  extractHeaders "com.google.ai.edge.litert:litert-gpu-api:1.3.0"

  implementation project(":react-native-nitro-modules")
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
  }
}

task extractAARHeaders {
  doLast {
    configurations.extractHeaders.files.each {
      def zipFile = it.absoluteFile
      def packageName = zipFile.name.tokenize('-')[0]
      def destDir = file("src/main/cpp/lib/${packageName}/")
        println "Extracting header files for $packageName..."
        copy {
          from zipTree(zipFile)
          into destDir
          include "**/*.h"
      }
    }
  }
}

task extractSOFiles {
  doLast {
    configurations.extractSO.files.each {
      def zipFile = it.absoluteFile
      def packageName = zipFile.name.tokenize('-')[0]
      def destDir = file("src/main/cpp/lib/${packageName}/")

        println "Extracting .so files for $packageName..."
        copy {
          from zipTree(zipFile)
          into destDir
          include "jni/**/*.so"
    }
  }
}
  }

def nativeBuildDependsOn(dependsOnTask) {
  def buildTasks = tasks.findAll({ task -> (
          !task.name.contains("Clean")
                  && (task.name.contains("externalNative")
                  || task.name.contains("CMake")
                  || task.name.contains("generateJsonModel")
          )
  ) })
  buildTasks.forEach { task -> task.dependsOn(dependsOnTask) }
}

afterEvaluate {
  nativeBuildDependsOn(extractAARHeaders)
  nativeBuildDependsOn(extractSOFiles)
}